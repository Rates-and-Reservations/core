// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id           String       @id @default(cuid())
  name         String
  ownerId      String // Clerk user ID of the merchant's owner
  country      String
  businessType BusinessType
  tradingName  String
  vatNumber    String?
  description  String?
  logo         String?
  industry     String
  category     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  MerchantContact MerchantContact[]

  MerchantUser MerchantUser[]

  MerchantAsset MerchantAsset[]

  ApiKey ApiKey[]

  ResourceTemplate ResourceTemplate[]

  Resource Resource[]

  Rate Rate[]

  Discount Discount[]

  BookingPageTemplate BookingPageTemplate[]

  BookingPage BookingPage[]

  PaymentActions PaymentActions[]

  Customer Customer[]

  BookingRequest BookingRequest[]

  Booking Booking[]

  AddOn AddOn[]

  BookingRequestFlow BookingRequestFlow[]

  Notification Notification[]

  WebhookEndpoint WebhookEndpoint[]

  WebhookEvent WebhookEvent[]

  AuditLog AuditLog[]

  WaitlistEntry WaitlistEntry[]

  Invoice Invoice[]

  BookingActivityLog BookingActivityLog[]

  RefundRequest RefundRequest[]

  ApiUsageLog ApiUsageLog[]

  ApiUsageStat ApiUsageStat[]

  App App[]

  AppInstall AppInstall[]

  OAuthToken OAuthToken[]
}

model MerchantContact {
  id         String   @id @default(cuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
  email      String
  phone      String
  address    String
  city       String
  postcode   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MerchantUser {
  id         String            @id @default(cuid())
  merchant   Merchant          @relation(fields: [merchantId], references: [id])
  merchantId String
  userId     String // Clerk user ID
  role       OrganisationRoles // e.g. OWNER, ADMIN, STAFF
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model MerchantAsset {
  id         String   @id @default(cuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
  name       String
  type       String
  url        String
  publicId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum BusinessType {
  SOLE_TRADER
  LIMITED_COMPANY
  PARTNERSHIP
}

enum OrganisationRoles {
  OWNER
  ADMIN
  STAFF
  DEVELOPER
}

model ApiKey {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  keyHash     String  @unique // Hashed + secure storage (NEVER plain text)
  label       String? // "Dashboard Key", "Public API Key"
  description String?

  scopes   Json? // e.g., ["bookings:read", "bookings:create"]
  isActive Boolean @default(true)

  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  ApiUsageLog ApiUsageLog[]

  ApiUsageStat ApiUsageStat[]
}

model ApiUsageLog {
  id               String   @id @default(cuid())

  merchantId       String
  merchant         Merchant @relation(fields: [merchantId], references: [id])

  apiKeyId         String
  apiKey           ApiKey @relation(fields: [apiKeyId], references: [id])

  endpoint         String    // e.g., "/v1/bookings"
  method           String    // GET, POST, etc.
  statusCode       Int       // 200, 404, 500, etc.

  ipAddress        String?
  userAgent        String?

  responseTimeMs   Int       // Response time in milliseconds
  rateLimitExceeded Boolean  @default(false)

  createdAt        DateTime @default(now())
}

model ApiUsageStat {
  id               String   @id @default(cuid())

  merchantId       String
  merchant         Merchant @relation(fields: [merchantId], references: [id])

  apiKeyId         String
  apiKey           ApiKey @relation(fields: [apiKeyId], references: [id])

  date             DateTime // e.g., "2025-03-24"
  requestCount     Int      // Total requests on this date
  successCount     Int      // 2xx responses
  errorCount       Int      // 4xx, 5xx responses
  rateLimitHits    Int

  createdAt        DateTime @default(now())
}


model ResourceTemplate {
  id         String    @id @default(cuid())
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  name        String
  category    String
  description String?

  defaultFields Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Resource Resource[]
}

model Resource {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  templateId String
  template   ResourceTemplate @relation(fields: [templateId], references: [id])

  name        String
  description String?
  capacity    Int

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Rate Rate[]

  ResourceBookingConfig ResourceBookingConfig[]

  BookingRequest BookingRequest[]

  Booking Booking[]

  WaitlistEntry WaitlistEntry[]
}

model Rate {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  name        String
  description String?

  price    Decimal
  currency String

  durationType RateDurationType
  isDefault    Boolean          @default(false)
  isActive     Boolean          @default(true) // flag if this rate is usable

  bookingStartDate DateTime?
  bookingEndDate   DateTime?

  usageStartDate DateTime?
  usageEndDate   DateTime?

  // ✅ Tax rules stay here (related to price)
  taxType   TaxType @default(PERCENTAGE)
  taxAmount Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Discount Discount[]

  BookingRequest BookingRequest[]

  Booking Booking[]
}

model ResourceBookingConfig {
  id         String   @id @default(cuid())
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  minDuration Int
  maxDuration Int
  bufferTime  Int

  availableDays Json? // [{ day: "Monday", open: "09:00", close: "17:00" }]
  blackoutDates Json? // ["2025-12-25", "2025-12-26"]

  allowMultipleBookings Boolean @default(false)

  // ✅ Cancellation policy belongs here
  cancellationPolicy CancellationPolicy @default(FLEXIBLE)
  refundWindowHours  Int? // e.g. cancel up to 24 hours before

  isActive Boolean @default(true) // resource booking on/off

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RateDurationType {
  PER_HOUR
  PER_DAY
  PER_NIGHT
}

enum CancellationPolicy {
  FLEXIBLE // Full refund until X hours before
  MODERATE // Partial refund until X hours before
  STRICT // No refund
}

enum TaxType {
  NONE
  PERCENTAGE
  FIXED
}

model Discount {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  code        String? // Optional if auto-applied
  description String?

  discountType DiscountType // PERCENTAGE or FIXED
  amount       Decimal

  appliesToRates Rate[] // Optional: connect to specific rates or leave global

  usageLimit Int? // e.g., max 100 uses
  usedCount  Int  @default(0)

  startDate DateTime?
  endDate   DateTime?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Booking {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [id])

  // Snapshots for integrity
  resourceName String
  resourceType String
  location     String?

  rateId String?
  rate   Rate?   @relation(fields: [rateId], references: [id])

  // Snapshots for integrity
  rateName       String
  ratePrice      Decimal
  currency       String
  taxAmount      Decimal
  discountAmount Decimal
  totalAmount    Decimal // Final price incl. tax/discount/addons

  // Status
  status BookingStatus @default(PENDING)

  startTime DateTime
  endTime   DateTime

  // Payment/Checkout
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String? // Reference to payment transaction

  // Additional
  notes         String?
  internalNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingAddOn   BookingAddOn[]
  PaymentActions PaymentActions[]

  Notification Notification[]

  Invoice Invoice[]

  BookingActivityLog BookingActivityLog[]

  RefundRequest RefundRequest[]
}

model AddOn {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name        String
  description String?
  price       Decimal
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BookingAddOn {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  addOnId    String
  quantity   Int     @default(1)
  totalPrice Decimal
}

model Customer {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name  String
  email String
  phone String?

  address  String?
  city     String?
  postcode String?
  country  String?

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingRequest BookingRequest[]

  Notification Notification[]

  WaitlistEntry WaitlistEntry[]

  Invoice Invoice[]
}

model BookingPageTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String?
  previewImageUrl String? // Preview of template design
  isSystem        Boolean @default(false)

  merchantId String? // Null if it's a system template
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingPage BookingPage[]
}

model BookingPage {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name String
  slug String @unique // Used for hosted page: yourplatform.com/m/{slug}

  templateId String
  template   BookingPageTemplate @relation(fields: [templateId], references: [id])

  primaryColor   String // Branding
  secondaryColor String
  logoUrl        String?

  customDomain String? // Optional: custom CNAME domain
  isActive     Boolean @default(true)

  config Json? // JSON blob for custom options: { showRatings: true, requireLogin: false }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model PaymentActions {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  provider          String // e.g., "stripe"
  providerPaymentId String // external payment reference

  amount   Decimal
  currency String
  status   PaymentStatus @default(PENDING)

  refundedAmount Decimal @default(0)
  paymentMethod  String? // e.g., "card", "wallet"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefundRequest RefundRequest[]

  RefundLog RefundLog[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model BookingRequest {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [id])

  rateId String?
  rate   Rate?   @relation(fields: [rateId], references: [id])

  customerId String? // Optional, pre-fill for known customers
  customer   Customer? @relation(fields: [customerId], references: [id])

  startTime DateTime? // Optional pre-filled time
  endTime   DateTime?

  // Configuration
  requirePayment     Boolean            @default(false)
  autoConfirm        Boolean            @default(true)
  cancellationPolicy CancellationPolicy @default(FLEXIBLE)
  refundWindowHours  Int?

  expiresAt DateTime? // Optional: when this request is no longer valid
  isActive  Boolean   @default(true)

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingRequestFlow BookingRequestFlow[]
}

model BookingRequestFlow {
  id               String         @id @default(cuid())
  bookingRequestId String
  bookingRequest   BookingRequest @relation(fields: [bookingRequestId], references: [id])

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  slug String @unique // Link slug for sharing: /book/{slug}

  usageLimit Int? // Max number of times this flow can be used
  usageCount Int  @default(0)

  webhookUrl    String? // Optional: notify when booking is completed
  webhookEvents Json? // e.g., ["booking.created"]

  isActive  Boolean   @default(true)
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  type    NotificationType // e.g., BOOKING_CONFIRMED, REMINDER, PAYMENT_RECEIPT
  channel NotificationChannel // EMAIL, SMS

  recipient String // Email address or phone number
  subject   String?
  message   String

  status       NotificationStatus @default(PENDING)
  errorMessage String?

  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  PAYMENT_RECEIPT
}

enum NotificationChannel {
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model NotificationTemplate {
  id         String              @id @default(cuid())
  merchantId String
  type       NotificationType // e.g., BOOKING_CONFIRMED
  channel    NotificationChannel

  subject String
  body    String // Can support variables: {{customerName}}, {{bookingDate}}

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebhookEndpoint {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name   String
  url    String
  secret String // Used to sign payloads
  events Json // ["booking.created", "payment.successful"]

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WebhookEvent WebhookEvent[]
}

model WebhookEvent {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  endpointId String
  endpoint   WebhookEndpoint @relation(fields: [endpointId], references: [id])

  eventType WebhookEventType // e.g., BOOKING_CREATED
  payload   Json

  status       WebhookEventStatus @default(PENDING)
  responseCode Int?
  responseBody String?
  errorMessage String?

  retryCount  Int       @default(0)
  nextRetryAt DateTime?

  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  WebhookEventLog WebhookEventLog[]
}

enum WebhookEventType {
  BOOKING_CREATED
  BOOKING_UPDATED
  PAYMENT_SUCCESSFUL
}

enum WebhookEventStatus {
  PENDING
  SENT
  FAILED
}

model WebhookEventLog {
  id           String       @id @default(cuid())
  eventId      String
  webhookEvent WebhookEvent @relation(fields: [eventId], references: [id])

  attemptNumber Int
  responseCode  Int
  responseBody  String?
  errorMessage  String?

  sentAt    DateTime
  createdAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  userId       String? // Clerk userId (optional if system-initiated)
  action       String // e.g., "booking.created", "rate.updated"
  resourceType String // e.g., "Booking", "Rate"
  resourceId   String? // Optional: link to the specific entity

  description String? // e.g., "John Doe confirmed booking #ABC123"

  ipAddress String? // Optional: for security/audit trail
  userAgent String? // Optional: client browser/device info

  createdAt DateTime @default(now())
}

model BookingActivityLog {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  userId       String? // Optional: Clerk user ID if a merchant user made the change
  systemAction Boolean @default(false) // True if it was system-triggered (e.g., auto-cancel)

  action        BookingActionType // e.g., STATUS_CHANGED, PAYMENT_UPDATED, CUSTOMER_NOTIFIED
  previousValue String? // JSON or string snapshot (optional)
  newValue      String? // JSON or string snapshot (optional)

  description String? // Optional human-readable description
  ipAddress   String?
  userAgent   String?

  createdAt DateTime @default(now())
}

enum BookingActionType {
  CREATED
  UPDATED
  CANCELLED
  STATUS_CHANGED
  PAYMENT_UPDATED
  CUSTOMER_NOTIFIED
  REFUNDED
}

model WaitlistEntry {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Optional pre-filled timeslot the customer is waiting for
  desiredStartTime DateTime?
  desiredEndTime   DateTime?

  notes String?

  status   WaitlistStatus @default(ACTIVE)
  priority Int            @default(0) // Optional: manual sorting or ranking

  notifiedAt DateTime?
  promotedAt DateTime? // If they were converted into a booking

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WaitlistStatus {
  ACTIVE
  CANCELLED
  NOTIFIED
  PROMOTED
}

model Invoice {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  invoiceNumber String @unique // e.g., INV-2024-0001
  currency      String

  subtotal       Decimal
  taxAmount      Decimal
  discountAmount Decimal
  totalAmount    Decimal

  status    InvoiceStatus @default(PENDING)
  issueDate DateTime
  dueDate   DateTime?
  paidAt    DateTime?

  notes  String?
  pdfUrl String? // Link to generated PDF (optional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model RefundRequest {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  paymentTransactionId String
  paymentTransaction   PaymentActions @relation(fields: [paymentTransactionId], references: [id])

  amount   Decimal
  currency String

  reason String?
  status RefundRequestStatus @default(PENDING)

  approvedBy String? // Clerk user ID of the approver (optional)
  approvedAt DateTime?
  rejectedAt DateTime?

  requestedBy String? // Clerk user ID of requester (optional)
  requestedAt DateTime @default(now())

  processedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefundLog RefundLog[]
}

enum RefundRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

model RefundLog {
  id String @id @default(cuid())

  refundRequestId String
  refundRequest   RefundRequest @relation(fields: [refundRequestId], references: [id])

  paymentTransactionId String
  paymentTransaction   PaymentActions @relation(fields: [paymentTransactionId], references: [id])

  amount   Decimal
  currency String

  provider         String // e.g., "stripe"
  providerRefundId String // ID returned by Stripe or payment processor

  status       RefundStatus @default(PENDING)
  errorMessage String?

  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum RefundStatus {
  PENDING
  SUCCESS
  FAILED
}

model App {
  id             String   @id @default(cuid())

  name           String
  description    String?
  logoUrl        String?
  websiteUrl     String?

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  
  clientId       String?   // For OAuth apps
  clientSecret   String?   // For OAuth apps (store securely!)

  redirectUrls   Json?     // OAuth redirects (if using OAuth)
  webhookUrl     String?   // Optional webhook to notify the app

  scopes         Json?     // ["bookings:read", "payments:write"]

  isPublic       Boolean @default(false)
  isActive       Boolean @default(true)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  AppInstall AppInstall[]

  OAuthToken OAuthToken[]
}

model AppInstall {
  id             String   @id @default(cuid())

  merchantId     String
  merchant       Merchant @relation(fields: [merchantId], references: [id])

  appId          String
  app            App @relation(fields: [appId], references: [id])

  status         AppInstallStatus @default(PENDING)

  installedAt    DateTime?
  uninstalledAt  DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  AppInstallScope AppInstallScope[]
}

enum AppInstallStatus {
  PENDING
  ACTIVE
  SUSPENDED
  UNINSTALLED
}

model AppScope {
  id          String   @id @default(cuid())

  name        String   // e.g., "bookings:read"
  description String?

  createdAt   DateTime @default(now())

  AppInstallScope AppInstallScope[]
}

model AppInstallScope {
  id             String   @id @default(cuid())

  appInstallId   String
  appInstall     AppInstall @relation(fields: [appInstallId], references: [id])

  scopeId        String
  scope          AppScope @relation(fields: [scopeId], references: [id])

  grantedAt      DateTime @default(now())
}

model OAuthToken {
  id             String   @id @default(cuid())

  appId          String
  app            App @relation(fields: [appId], references: [id])

  merchantId     String
  merchant       Merchant @relation(fields: [merchantId], references: [id])

  accessToken    String
  refreshToken   String?
  expiresAt      DateTime?

  scopes         Json?  // Optional: list of granted scopes

  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
