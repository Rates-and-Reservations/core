// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
  writeBarrelFiles = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Merchant Models
 */

//  Merchant: The main entity representing a business or organisation
model Merchant {
  id           String       @id @default(cuid())
  name         String
  ownerId      String // Clerk user ID of the merchant's owner
  country      String
  businessType BusinessType
  tradingName  String
  vatNumber    String?
  description  String?
  logo         String?
  industry     String
  category     String

  isVerified Boolean @default(false)
  isActive   Boolean @default(true)

  verifiedAt DateTime?
  disabledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MerchantContact MerchantContact[]

  MerchantUser MerchantUser[]

  MerchantAsset MerchantAsset[]

  ApiKey ApiKey[]

  ResourceTemplate ResourceTemplate[]

  Resource Resource[]

  Rate Rate[]

  Discount Discount[]

  PaymentActions PaymentActions[]

  Customer Customer[]

  BookingRequest BookingRequest[]

  Booking Booking[]

  AddOn AddOn[]

  BookingRequestFlow BookingRequestFlow[]

  Notification Notification[]

  WebhookEndpoint WebhookEndpoint[]

  WebhookEvent WebhookEvent[]

  AuditLog AuditLog[]

  WaitlistEntry WaitlistEntry[]

  Invoice Invoice[]

  BookingActivityLog BookingActivityLog[]

  RefundRequest RefundRequest[]

  ApiUsageLog ApiUsageLog[]

  ApiUsageStat ApiUsageStat[]

  App App[]

  AppInstall AppInstall[]

  OAuthToken      OAuthToken[]
  BookingTemplate BookingTemplate[]

  UiTemplate UiTemplate[]

  CancellationPolicy CancellationPolicy[]
}

//  MerchantContact: Contact details for the merchant
model MerchantContact {
  id         String   @id @default(cuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
  email      String
  phone      String
  address    String
  city       String
  postcode   String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//  MerchantUser: Represents a user within the merchant's organisation
model MerchantUser {
  id         String            @id @default(cuid())
  merchant   Merchant          @relation(fields: [merchantId], references: [id])
  merchantId String
  userId     String // Clerk user ID
  role       OrganisationRoles // e.g. OWNER, ADMIN, STAFF
  isActive   Boolean           @default(true)
  isVerified Boolean           @default(false)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

//  MerchantAsset: Represents a file or asset uploaded by the merchant
model MerchantAsset {
  id         String   @id @default(cuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String
  name       String
  type       String
  url        String
  publicId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ResourceAsset ResourceAsset[]
}

enum BusinessType {
  SOLE_TRADER
  LIMITED_COMPANY
  PARTNERSHIP
}

enum OrganisationRoles {
  OWNER
  ADMIN
  STAFF
  DEVELOPER
}

/**
 * Resource Models
 */

// ResourceTemplate: Represents a template for a resource type
model ResourceTemplate {
  id         String    @id @default(cuid())
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  name        String
  category    String
  description String?

  defaultFields Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Resource Resource[]
}

// Resource: Represents a physical or virtual resource that can be booked
model Resource {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  templateId String
  template   ResourceTemplate @relation(fields: [templateId], references: [id])

  name        String
  description String?
  capacity    Int

  metadata Json?

  tags String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Rate Rate[]

  ResourceBookingConfig ResourceBookingConfig[]

  WaitlistEntry WaitlistEntry[]

  BookingRequest BookingRequest[]

  ResourceAsset ResourceAsset[]
}

// ResourceBookingConfig: Represents the booking configuration for a resource
model ResourceBookingConfig {
  id         String   @id @default(cuid())
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  minDuration Int
  maxDuration Int
  bufferTime  Int

  availableDays Json? // [{ day: "Monday", open: "09:00", close: "17:00" }]
  blackoutDates Json? // ["2025-12-25", "2025-12-26"]

  allowMultipleBookings Boolean @default(false)
  enableWaitlist        Boolean @default(false)

  cancellationPolicyId String?
  cancellationPolicy   CancellationPolicy? @relation(fields: [cancellationPolicyId], references: [id])

  isActive Boolean @default(true) // resource booking on/off

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AddOn: Represents an additional service or item that can be attached to a booking
model AddOn {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name          String
  description   String?
  price         Decimal
  currency      String
  showInBooking Boolean  @default(true)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  RateAddOn RateAddOn[]

  BookingItemAddOn BookingItemAddOn[]

  BookingAddOn BookingAddOn[]
}

model ResourceAsset {
  id String @id @default(cuid())

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  assetId String
  asset   MerchantAsset @relation(fields: [assetId], references: [id])

  isPrimary Boolean @default(false) // Optional: for thumbnail/featured image
  sortOrder Int     @default(0) // Optional: for image ordering in galleries

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Pricing Models
 */

// Rate: Represents a pricing rate for a resource
model Rate {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  name        String
  description String?

  price    Decimal
  currency String

  durationType RateDurationType
  isDefault    Boolean          @default(false)
  isPublished  Boolean          @default(true)
  isActive     Boolean          @default(true) // flag if this rate is usable

  orderIndex Int @default(0) // Optional: for sorting rates

  bookingStartDate DateTime?
  bookingEndDate   DateTime?

  usageStartDate DateTime?
  usageEndDate   DateTime?

  // ✅ Tax rules stay here (related to price)
  taxType   TaxType @default(PERCENTAGE)
  taxAmount Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Discount Discount[]

  RateAddOn RateAddOn[]

  BookingRateSnapshot BookingRateSnapshot[]
}

enum RateDurationType {
  PER_HOUR
  PER_DAY
  PER_NIGHT
}

enum TaxType {
  NONE
  PERCENTAGE
  FIXED
}

// RateAddOn: Represents an add-on that can be attached to a rate
model RateAddOn {
  id      String @id @default(cuid())
  rateId  String
  addOnId String

  rate  Rate  @relation(fields: [rateId], references: [id])
  addOn AddOn @relation(fields: [addOnId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Discount: Represents a discount that can be applied to a rate
model Discount {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  code        String? // Optional if auto-applied
  description String?

  discountType DiscountType // PERCENTAGE or FIXED
  amount       Decimal

  appliesToRates Rate[] // Optional: connect to specific rates or leave global

  usageLimit Int? // e.g., max 100 uses
  usedCount  Int  @default(0)

  startDate DateTime?
  endDate   DateTime?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

/**
 * Booking Configuration Models
 */

// BookingTemplate: Represents a template for a booking flow
model BookingTemplate {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name          String
  description   String?
  selectionMode SelectionMode // SINGLE or MULTI
  config        Json // Arbitrary config like required fields, limits, etc.
  actions       BookingAction[] // List of actions this template expects
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  BookingRequest BookingRequest[]
}

// BookingAction: Represents a step or action in a booking flow
model BookingAction {
  id                String          @id @default(cuid())
  bookingTemplateId String
  bookingTemplate   BookingTemplate @relation(fields: [bookingTemplateId], references: [id])

  name                      String // e.g., “Choose room”, “Select duration”
  type                      ActionType // ENUM: RESOURCE_SELECT, DATE_SELECT, ADD_ON_SELECT, etc.
  config                    Json // e.g., resource IDs, allowed date range, etc.
  required                  Boolean                     @default(true)
  BookingRequestActionValue BookingRequestActionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UiTemplate: Represents a template for the booking UI
model UiTemplate {
  id              String  @id @default(cuid())
  name            String
  description     String?
  previewImageUrl String? // Preview of template design
  isSystem        Boolean @default(false)

  merchantId String? // Null if it's a system template
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  config     Json // Branding, layout, custom fields

  uiTheme String? // URL to custom layout/theme

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingRequestFlow BookingRequestFlow[]
}

enum SelectionMode {
  SINGLE
  MULTI
}

enum ActionType {
  DATE_SELECT
  RESOURCE_SELECT
  CUSTOMER_DETAILS
  ADD_ON_SELECT
  INPUT_FIELD
  PAYMENT_SELECT
}

// BookingRequest: Represents a booking request made by a customer
model BookingRequest {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  prefilledFields Json? // Optional: pre-fill custom fields

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  resourceId String?
  resource   Resource? @relation(fields: [resourceId], references: [id])

  templateId String
  template   BookingTemplate @relation(fields: [templateId], references: [id])

  expiresAt DateTime? // Optional: when this request is no longer valid
  isActive  Boolean   @default(true)

  notes String?

  status            BookingRequestStatus // INITIATED | IN_PROGRESS | COMPLETED | FAILED
  actionStatus      Json // { actionId: status } mapping, optional details
  finalizedSnapshot Json?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  BookingRequestFlow BookingRequestFlow[]

  BookingRequestActionValue BookingRequestActionValue[]

  Booking Booking[]
}

// BookingRequestActionValue: Represent the state of a booking action in a request
model BookingRequestActionValue {
  id               String         @id @default(cuid())
  bookingRequestId String
  bookingActionId  String
  bookingAction    BookingAction  @relation(fields: [bookingActionId], references: [id])
  bookingRequest   BookingRequest @relation(fields: [bookingRequestId], references: [id])
  value            Json // Can be a resourceId, date range, array of add-ons, etc.
  completedAt      DateTime       @default(now())
  createdAt        DateTime       @default(now())
}

enum BookingRequestStatus {
  INITIATED
  IN_PROGRESS
  COMPLETED
  FAILED
}

// BookingRequestFlow: Represents a flow that can be shared for booking
model BookingRequestFlow {
  id               String         @id @default(cuid())
  bookingRequestId String
  bookingRequest   BookingRequest @relation(fields: [bookingRequestId], references: [id])

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  uiTemplateId String
  uiTemplate   UiTemplate @relation(fields: [uiTemplateId], references: [id])

  slug String @unique // Link slug for sharing: /book/{slug}

  usageLimit Int? // Max number of times this flow can be used
  usageCount Int  @default(0)

  webhookUrl    String? // Optional: notify when booking is completed
  webhookEvents Json? // e.g., ["booking.created"]

  isActive  Boolean   @default(true)
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Core Booking Models
 */

// BookingItem: Represents a single item in a booking (e.g., room, table, ticket)
model BookingItem {
  id String @id @default(cuid())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  startTime DateTime
  endTime   DateTime

  bookingRateSnapshotId String
  bookingRateSnapshot   BookingRateSnapshot @relation(fields: [bookingRateSnapshotId], references: [id])

  status BookingItemStatus @default(CONFIRMED) // Useful for partial success flows

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingItemAddOn BookingItemAddOn[]

  CancellationRequest CancellationRequest[]
}

enum BookingItemStatus {
  PENDING // Item added, not yet confirmed
  CONFIRMED // Successfully booked
  CANCELLED // Canceled before or after confirmation
  COMPLETED // Booking fulfilled (e.g., stay completed)
  FAILED // Could not be booked (e.g., resource unavailable)
  WAITLISTED // On waitlist for this resource
  IN_USE // Checked in / currently active (if live tracking is needed)
}

// Booking: Represents a confirmed booking made by a customer
model Booking {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  bookingRequestId String?
  bookingRequest   BookingRequest? @relation(fields: [bookingRequestId], references: [id])

  // Status
  status BookingStatus @default(PENDING)

  startTime DateTime
  endTime   DateTime

  // Additional
  notes         String?
  internalNotes String?

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PaymentActions PaymentActions[]

  Notification Notification[]

  Invoice Invoice[]

  BookingActivityLog BookingActivityLog[]

  RefundRequest RefundRequest[]

  BookingItem BookingItem[]

  BookingAddOn BookingAddOn[]

  CancellationRequest CancellationRequest[]
}

// BookingItemAddOn: Represents an add-on attached to a booking item
model BookingItemAddOn {
  id String @id @default(cuid())

  bookingItemId String
  bookingItem   BookingItem @relation(fields: [bookingItemId], references: [id])

  addOnId String
  addOn   AddOn  @relation(fields: [addOnId], references: [id])

  addOnName  String
  unitPrice  Decimal
  quantity   Int     @default(1)
  totalPrice Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// BookingAddOn: Represents an add-on attached to a booking
model BookingAddOn {
  id String @id @default(cuid())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  addOnId String?
  addOn   AddOn?  @relation(fields: [addOnId], references: [id])

  addOnName  String
  quantity   Int     @default(1)
  unitPrice  Decimal
  totalPrice Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// BookingRateSnapshot: Represents a snapshot of a rate at the time of booking
model BookingRateSnapshot {
  id String @id @default(cuid())

  rateId String
  rate   Rate   @relation(fields: [rateId], references: [id])

  name        String
  description String?

  price    Decimal
  currency String

  durationType RateDurationType
  isDefault    Boolean          @default(false)
  isActive     Boolean          @default(true) // flag if this rate is usable

  bookingStartDate DateTime?
  bookingEndDate   DateTime?

  usageStartDate DateTime?
  usageEndDate   DateTime?

  taxType   TaxType @default(PERCENTAGE)
  taxAmount Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BookingItem BookingItem[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Customer: Represents a customer who makes bookings
model Customer {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name  String
  email String
  phone String?

  address  String?
  city     String?
  postcode String?
  country  String?

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]

  WaitlistEntry WaitlistEntry[]

  Invoice Invoice[]

  BookingRequest BookingRequest[]

  Booking Booking[]
}

// WaitlistEntry: Represents a customer waiting for a resource
model WaitlistEntry {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Optional pre-filled timeslot the customer is waiting for
  desiredStartTime DateTime?
  desiredEndTime   DateTime?

  notes String?

  status   WaitlistStatus @default(ACTIVE)
  priority Int            @default(0) // Optional: manual sorting or ranking

  notifiedAt DateTime?
  promotedAt DateTime? // If they were converted into a booking

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WaitlistStatus {
  ACTIVE
  CANCELLED
  NOTIFIED
  PROMOTED
}

/**
 * Payment, Invoicing Cancellation and Refund Models
 */

// PaymentActions: Represents a payment transaction for a booking
model PaymentActions {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  provider          String // e.g., "stripe"
  providerPaymentId String // external payment reference

  amount   Decimal
  currency String
  status   PaymentStatus @default(PENDING)

  refundedAmount Decimal @default(0)
  paymentMethod  String? // e.g., "card", "wallet"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefundRequest RefundRequest[]

  RefundLog RefundLog[]

  InvoicePayment InvoicePayment[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Invoice: Represents an invoice for a booking or payment
model Invoice {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  invoiceNumber String @unique // e.g., INV-2024-0001
  currency      String

  subtotal       Decimal
  taxAmount      Decimal
  discountAmount Decimal
  totalAmount    Decimal

  status    InvoiceStatus @default(PENDING)
  issueDate DateTime
  dueDate   DateTime?
  paidAt    DateTime?

  notes  String?
  pdfUrl String? // Link to generated PDF (optional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InvoicePayment InvoicePayment[]
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// InvoicePayment: Represents a payment made against an invoice
model InvoicePayment {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  paymentId String
  payment   PaymentActions @relation(fields: [paymentId], references: [id])

  amountPaid Decimal
  paidAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// InvoicePayment: Represents a payment made against an invoice
model RefundRequest {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  paymentTransactionId String
  paymentTransaction   PaymentActions @relation(fields: [paymentTransactionId], references: [id])

  amount   Decimal
  currency String

  reason String?
  status RefundRequestStatus @default(PENDING)

  approvedBy String? // Clerk user ID of the approver (optional)
  approvedAt DateTime?
  rejectedAt DateTime?

  requestedBy String? // Clerk user ID of requester (optional)
  requestedAt DateTime @default(now())

  processedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefundLog RefundLog[]
}

enum RefundRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

// RefundLog: Represents a log entry for a refund transaction
model RefundLog {
  id String @id @default(cuid())

  refundRequestId String
  refundRequest   RefundRequest @relation(fields: [refundRequestId], references: [id])

  paymentTransactionId String
  paymentTransaction   PaymentActions @relation(fields: [paymentTransactionId], references: [id])

  amount   Decimal
  currency String

  provider         String // e.g., "stripe"
  providerRefundId String // ID returned by Stripe or payment processor

  status       RefundStatus @default(PENDING)
  errorMessage String?

  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum RefundStatus {
  PENDING
  SUCCESS
  FAILED
}

// CancelationPolicy: Represents a policy for booking cancellations
model CancellationPolicy {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name           String
  description    String?
  refundType     RefundType // FULL, PARTIAL, NONE
  refundAmount   Decimal? // Used if PARTIAL
  timeLimitHours Int? // How many hours before booking start is allowed

  appliesTo CancellationScope @default(BOOKING) // BOOKING or ITEM

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ResourceBookingConfig ResourceBookingConfig[]
}

enum RefundType {
  FULL
  PARTIAL
  NONE
}

enum CancellationScope {
  BOOKING
  ITEM
}

// CancellationRequest: Represents a request to cancel a booking
model CancellationRequest {
  id String @id @default(cuid())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  bookingItemId String?
  bookingItem   BookingItem? @relation(fields: [bookingItemId], references: [id])

  requestedBy String? // Clerk user or customer ID
  reason      String?
  source      CancellationSource @default(CUSTOMER) // CUSTOMER | SYSTEM | SUPPORT

  status      CancellationStatus @default(PENDING) // PENDING, APPROVED, DECLINED, CANCELLED
  processedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  declinedAt  DateTime?

  refundAmount Decimal?
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CancellationStatus {
  PENDING
  APPROVED
  DECLINED
  CANCELLED
}

enum CancellationSource {
  CUSTOMER
  SUPPORT
  SYSTEM
}

/**
 * Booking Notifications and Messaging Models
 */

// Notification: Represents a notification message sent to a customer or merchant
model Notification {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  type    NotificationType // e.g., BOOKING_CONFIRMED, REMINDER, PAYMENT_RECEIPT
  channel NotificationChannel // EMAIL, SMS

  notificationTemplateId String?
  template               NotificationTemplate? @relation(fields: [notificationTemplateId], references: [id])

  recipient String // Email address or phone number
  subject   String?
  message   String

  status       NotificationStatus @default(PENDING)
  errorMessage String?

  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// NotificationTemplate: Represents a template for a notification message
model NotificationTemplate {
  id         String              @id @default(cuid())
  merchantId String
  type       NotificationType // e.g., BOOKING_CONFIRMED
  channel    NotificationChannel

  subject String
  body    String // Can support variables: {{customerName}}, {{bookingDate}}

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]
}

enum NotificationType {
  MERCHANT_USER_INVITE
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  PAYMENT_RECEIPT
}

enum NotificationChannel {
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

/**
 * App marketplace models
 */

// App: Represents a third-party app or integration
model App {
  id String @id @default(cuid())

  name        String
  description String?
  logoUrl     String?
  websiteUrl  String?

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  clientId     String? // For OAuth apps
  clientSecret String? // For OAuth apps (store securely!)

  redirectUrls Json? // OAuth redirects (if using OAuth)
  webhookUrl   String? // Optional webhook to notify the app

  scopes Json? // ["bookings:read", "payments:write"]

  isPublic    Boolean @default(false)
  isPublished Boolean @default(false)
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AppInstall AppInstall[]

  OAuthToken OAuthToken[]
}

// AppInstall: Represents an installed instance of an app
model AppInstall {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  appId String
  app   App    @relation(fields: [appId], references: [id])

  status AppInstallStatus @default(PENDING)

  installedAt   DateTime?
  uninstalledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AppInstallScope AppInstallScope[]
}

enum AppInstallStatus {
  PENDING
  ACTIVE
  SUSPENDED
  UNINSTALLED
}

// AppScope: Represents a permission scope for an app
model AppScope {
  id String @id @default(cuid())

  name        String // e.g., "bookings:read"
  description String?

  createdAt DateTime @default(now())

  AppInstallScope AppInstallScope[]
}

// AppInstallScope: Represents a granted scope for an app install
model AppInstallScope {
  id String @id @default(cuid())

  appInstallId String
  appInstall   AppInstall @relation(fields: [appInstallId], references: [id])

  scopeId String
  scope   AppScope @relation(fields: [scopeId], references: [id])

  createdAt DateTime @default(now())
}

// OAuthToken: Represents an OAuth token for an app install
model OAuthToken {
  id String @id @default(cuid())

  appId String
  app   App    @relation(fields: [appId], references: [id])

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  accessToken  String
  refreshToken String?
  expiresAt    DateTime?

  scopes Json? // Optional: list of granted scopes

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

/**
 * Events, Usage and analytics models
 */

// ApiUsageLog: Represents a log entry for API usage
model ApiUsageLog {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  apiKeyId String
  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id])

  endpoint   String // e.g., "/v1/bookings"
  method     String // GET, POST, etc.
  statusCode Int // 200, 404, 500, etc.

  ipAddress String?
  userAgent String?

  responseTimeMs    Int // Response time in milliseconds
  rateLimitExceeded Boolean @default(false)

  createdAt DateTime @default(now())
}

// ApiUsageStat: Represents a daily usage summary for an API key
model ApiUsageStat {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  apiKeyId String
  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id])

  date          DateTime // e.g., "2025-03-24"
  requestCount  Int // Total requests on this date
  successCount  Int // 2xx responses
  errorCount    Int // 4xx, 5xx responses
  rateLimitHits Int

  createdAt DateTime @default(now())
}

// BookingActivityLog: Represents a log entry for booking activity
model BookingActivityLog {
  id String @id @default(cuid())

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  userId       String? // Optional: Clerk user ID if a merchant user made the change
  systemAction Boolean @default(false) // True if it was system-triggered (e.g., auto-cancel)

  action        BookingActionType // e.g., STATUS_CHANGED, PAYMENT_UPDATED, CUSTOMER_NOTIFIED
  previousValue String? // JSON or string snapshot (optional)
  newValue      String? // JSON or string snapshot (optional)

  description String? // Optional human-readable description
  ipAddress   String?
  userAgent   String?

  performedAt DateTime?
  performedBy String? // Clerk user ID or system

  createdAt DateTime @default(now())
}

enum BookingActionType {
  CREATED
  UPDATED
  CANCELLED
  STATUS_CHANGED
  PAYMENT_UPDATED
  CUSTOMER_NOTIFIED
  REFUNDED
}

// AuditLog: Represents a log entry for merchant activity
model AuditLog {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  userId       String? // Clerk userId (optional if system-initiated)
  action       String // e.g., "booking.created", "rate.updated"
  resourceType String // e.g., "Booking", "Rate"
  resourceId   String? // Optional: link to the specific entity

  description String? // e.g., "John Doe confirmed booking #ABC123"

  ipAddress String? // Optional: for security/audit trail
  userAgent String? // Optional: client browser/device info

  performedAt DateTime?
  performedBy String? // Clerk user ID or system

  createdAt DateTime @default(now())
}

/**
 * Developers: Webhooks and event models
 */

// ApiKey: Represents an API key for merchant API access
model ApiKey {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  keyHash     String  @unique // Hashed + secure storage (NEVER plain text)
  label       String? // "Dashboard Key", "Public API Key"
  description String?

  scopes   Json? // e.g., ["bookings:read", "bookings:create"]
  isActive Boolean @default(true)

  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  ApiUsageLog ApiUsageLog[]

  ApiUsageStat ApiUsageStat[]
}

// WebhookEndpoint: Represents a webhook URL for event notifications
model WebhookEndpoint {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  name   String
  url    String
  secret String // Used to sign payloads
  events Json // ["booking.created", "payment.successful"]

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WebhookEvent WebhookEvent[]
}

// WebhookEvent: Represents an event to be sent to a webhook endpoint
model WebhookEvent {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  endpointId String
  endpoint   WebhookEndpoint @relation(fields: [endpointId], references: [id])

  eventType WebhookEventType // e.g., BOOKING_CREATED
  payload   Json

  status       WebhookEventStatus @default(PENDING)
  responseCode Int?
  responseBody String?
  errorMessage String?

  retryCount  Int       @default(0)
  nextRetryAt DateTime?

  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  WebhookEventLog WebhookEventLog[]
}

enum WebhookEventType {
  BOOKING_CREATED
  BOOKING_UPDATED
  PAYMENT_SUCCESSFUL
}

enum WebhookEventStatus {
  PENDING
  SENT
  FAILED
}

// The actual log of webhook events sent
model WebhookEventLog {
  id           String       @id @default(cuid())
  eventId      String
  webhookEvent WebhookEvent @relation(fields: [eventId], references: [id])

  attemptNumber Int
  responseCode  Int
  responseBody  String?
  errorMessage  String?

  sentAt    DateTime
  createdAt DateTime @default(now())
}
